name: wunder
version: "0.0.0"
author: Your Name <your@email.com>
about: Describe your extension
base_endpoint: https://a.wunderlist.com/api/v1/
oauth:
    client_id: "{{env.WUNDER_CLIENT_ID}}"
    client_secret: "{{env.WUNDER_CLIENT_SECRET}}"
    auth_url: https://www.wunderlist.com/oauth/authorize
    token_url: https://www.wunderlist.com/oauth/access_token
    header_key: X-Access-Token
headers:
    X-Client-ID: "{{env.WUNDER_CLIENT_ID}}"
vars:
    query_param: q
subcommands:
# Requests
    - lists:
        about: get lists
        path: lists
    - list_id:
        about: get list by id
        path: lists/{{args.LIST_ID}}
        args:
            - LIST_ID:
                help: List id
                required: true
    - tasks_id:
        about: get tasks by list id
        path: tasks
        query_params:
            completed: "{% if args.completed is defined %}true{% else %}false{% endif %}"
            list_id: |
                {%- if args.LIST_ID is defined -%}
                    {{args.LIST_ID}}
                {%- else -%}
                    {{env.WUNDER_LIST_ID}}
                {%- endif -%}
        args:
            - LIST_ID:
                help: List id
                required: false
            - completed:
                short: c
                long: completed
                help: List completed tasks
                required: false
    - update_task:
        about: update a task (PATCH)
        path: |
            {%- if args.subtask is not defined-%}
                tasks/{{args.TASK_ID}}
            {%- else -%}
                subtasks/{{args.TASK_ID}}
            {%- endif -%}
        method: PATCH
        args:
            - REVISION:
                help: Wunderlist revision
                required: true
            - TASK_ID:
                help: Task id
                required: true
            - completed:
                short: c
                long: completed
                help: Mark the task as completed
                required: false
            - title:
                short: T
                long: title
                help: Change task title
                required: false
                takes_value: true
            - subtask:
                short: s
                long: subtask
                help: Mark a subtask as done
                required: false
        body:
            completed: "{% if args.completed is defined %}true{% else %}false{% endif %}"
            revision: "{{args.REVISION}}"
            title: "{{ args.title }}"
    - create_task:
        about: perform a create task request (POST)
        path: tasks
        method: POST
        args:
            - list_id:
                short: l
                long: list_id
                help: List id
                required: false
                takes_value: true
            - TITLE:
                help: What to do?
                required: true
        body:
            list_id: |
                {%- if args.list_id is defined -%}
                    {{args.list_id}}
                {%- else -%}
                    {{env.WUNDER_LIST_ID}}
                {%- endif -%}
            title: "{{ args.TITLE }}"
    - create_subtask:
        about: perform a subtask request
        path: subtasks
        method: POST
        args:
            - TASK_ID:
                help: Task id
                required: true
            - TITLE:
                help: What to do?
                required: true
        body:
            task_id: "{{args.TASK_ID}}"
            title: "{{ args.TITLE }}"
    - subtasks:
        about: list subtasks
        path: subtasks
        method: GET
        args:
            - list_id:
                short: l
                long: list_id
                help: List id
                required: false
                takes_value: true
            - task_id:
                short: T
                long: tasks_id
                help: Task id (using this ignores list_id)
                required: false
                takes_value: true
        query_params:
            list_id: |
                {%- if args.task_id is not defined -%}
                    {%- if args.list_id is defined -%}
                        {{args.list_id}}
                    {%- else -%}
                        {{env.WUNDER_LIST_ID}}
                    {%- endif -%}
                {%- endif -%}
            task_id: |
                {%- if args.task_id is defined -%}
                    {{args.task_id}}
                {%- endif -%}

# Scripts
    - list:
        about: get list by name
        args:
            - LIST_TITLE:
                help: List title
                required: true
            - complete:
                short: c
                long: complete
                help: Return the entire list json
                required: false
        script: |
            {% if args.complete is defined %}
                wunder lists | jq -r 'map(select(.title | test("{{args.LIST_TITLE}}";"i"))) | .[0]'
            {% else %}
                wunder lists | jq -r 'map(select(.title | test("{{args.LIST_TITLE}}";"i"))) | .[0] | .id'
            {% endif %}

    - todo:
        about: create a task
        args:
            - list_id:
                short: l
                long: list_id
                help: List id, ignored if list title is defined
                required: false
                takes_value: true
            - TITLE:
                help: What to do?
                required: true
            - LIST_TITLE:
                help: List to add to (substring case insensitive)
                required: false
        script: |
            {% if args.LIST_TITLE is defined %}
                LIST_ID=$(wunder list {{args.LIST_TITLE}})
            {% elif args.list_id is defined %}
                LIST_ID="{{args.list_id}}"
            {% else %}
                LIST_ID="{{env.WUNDER_LIST_ID}}"
            {% endif %}
            wunder create_task -q -l "$LIST_ID" "{{args.TITLE}}"
            wunder tasks -l "$LIST_ID"

    - subtask:
        about: create a subtask
        args:
            - list_id:
                short: l
                long: list_id
                help: List id, ignored if list title is defined
                required: false
                takes_value: true
            - TASK_TITLE:
                help: Substring of the task title (it will match the first)
                required: true
            - TITLE:
                help: What to do?
                required: true
            - LIST_TITLE:
                help: List to add to (substring case insensitive)
                required: false
        script: |
            {% if args.LIST_TITLE is defined %}
                LIST_ID=$(wunder list {{args.LIST_TITLE}})
            {% elif args.list_id is defined %}
                LIST_ID="{{args.list_id}}"
            {% else %}
                LIST_ID="{{env.WUNDER_LIST_ID}}"
            {% endif %}

            TASK_ID=$(wunder tasks_id "$LIST_ID" | jq -r 'map(select(.title | test("{{args.TASK_TITLE}}";"i"))) | .[0] | .id')

            wunder create_subtask "$TASK_ID" "{{args.TITLE}}"

    - tasks:
        about: get tasks for list
        args:
            - LIST_TITLE:
                help: List title
                required: false
            - list_id:
                short: -l
                long: list_id
                help: Optional list id, ignored if there's a list title
                required: false
                takes_value: true
            - completed:
                short: c
                long: completed
                help: List completed tasks and subtasks
            - subtasks:
                short: s
                long: subtasks
                help: Show subtasks
        script: |
            {% if args.LIST_TITLE is defined %}
                LIST_ID=$(wunder list {{args.LIST_TITLE}})
            {% elif args.list_id is defined %}
                LIST_ID="{{args.list_id}}"
            {% elif env.WUNDER_LIST_ID is defined %}
                LIST_ID="{{env.WUNDER_LIST_ID}}"
            {% else %}
                echo "No list id provided"
                exit 1
            {% endif %}

            {%- if args.subtasks is defined -%}
                {% if args.completed is defined %}
                    export SUBTASKS=$(wunder subtasks -l "$LIST_ID")
                {% else %}
                    export SUBTASKS=$(wunder subtasks -l "$LIST_ID" | jq 'map(select(.completed == false))')
                {% endif %}
            {%- endif -%}

            {% set completed = "" %}
            {% if args.completed is defined %}
                {% set completed = "-c" %}
            {% endif %}

            export TASKS=$(wunder tasks_id {{completed}} $LIST_ID)

            python {{scmd.scmd_config_base_path}}templates/print_tasks.py
    - done:
        about: mark a task as done
        args:
            - TASK:
                help: A substring of the task text (it will match the first one)
                required: true
            - LIST_NAME:
                help: Optional list name (substring case insensitive)
                required: false
            - list_id:
                short: -l
                long: list_id
                required: false
                takes_value: true
        script: |
            {% if args.list_id is defined -%}
                LIST_ID="{{args.list_id}}"
            {% elif args.LIST_NAME is defined %}
                LIST_ID=$(wunder list {{args.LIST_NAME}})
            {% elif env.WUNDER_LIST_ID is defined %}
                LIST_ID="{{env.WUNDER_LIST_ID}}"
            {% endif %}
            TASKS=$(wunder tasks_id "$LIST_ID")
            TASK=$(echo "$TASKS" | jq 'map(select(.title | test("{{args.TASK}}";"i")))|.[0]')

            if [ "$TASK" = "null" ]
            then
                TASKS=$(wunder subtasks -l "$LIST_ID")
                TASK=$(echo "$TASKS" | jq 'map(select(.title | test("{{args.TASK}}";"i")))|.[0]')
                if [ -z "$TASK" ]
                then
                    echo "List not found"
                    exit 1
                fi
                SUBTASK=true
            fi

            TASK_ID=$(echo "$TASK" | jq -r '.id')
            TASK_REVISION=$(echo "$TASK" | jq -r '.revision')
            if [ -z "$SUBTASK" ]; then
                wunder update_task -q -c $TASK_REVISION $TASK_ID
            else
                wunder update_task -q -s -c $TASK_REVISION $TASK_ID
            fi
            wunder tasks -l "$LIST_ID"
    - undo:
        about: unmark a task as done
        args:
            - TASK:
                help: A substring of the task text (it will match the first one)
                required: true
            - list_id:
                short: -l
                long: list_id
                required: false
                takes_value: true
        script: |
            TASKS=$(wunder tasks -r -c {% if args.list_id is defined %}{{args.list_id}}{% endif %})
            TASK=$(echo "$TASKS" | jq 'map(select(.title | test("{{args.TASK}}";"i")))|.[0]')
            TASK_ID=$(echo "$TASK" | jq -r '.id')
            TASK_REVISION=$(echo "$TASK" | jq -r '.revision')
            wunder update_task $TASK_REVISION $TASK_ID
